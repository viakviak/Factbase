// Names..
name
name null // default name
name unique
name default
name auto
name readonly
name required
name tag
name datatype
  datatype string // default datatype (first specified)
  datatype boolean
    boolean false // default boolean
    boolean true
  datatype int {default: 0}
  datatype datetime
  datatype guid
  datatype object // forward declaration of object reference
  datatype phrase // Textual information on one or several languages, forward declaration
name parameter {datatype: null, unique: boolean, auto: boolean, required: boolean, tag: string}
  parameter primaryKey {datatype:int, primaryKey: true, unique:true, auto:true, readonly:true} // generates new auto-incremented number
  parameter foreignKey {datatype: object} // foreign key by integer id
  parameter nameKey {datatype: object} // foreign key by string name
  parameter title {datatype:phrase, default: name} // by default sets capitalized name with spaces between camel-cased parts of the name
  parameter description {datatype:phrase, default: title} // by default sets title content
  parameter uid {datatype:guid, unique:true, auto:true} // by default generates new guid
  primaryKey id
  foreignKey creatorRef
  parameter createDate {datatype:datetime, auto:true}
  foreignKey modifiedByRef
  parameter modifyDate {datatype:datetime}
  parameter deleteDate {datatype:datetime}
  parameter nameRef {datatype:object, tag:"id of the highest pure name declaration"}
name macro // textual representation, which will be evaluated as part of script
  macro keyParams = "uid, id"
  macro headerParams = "title, description, keyParams"
  macro trackingParams = "creatorRef, createDate, modifiedByRef, modifyDate, deleteDate"
  macro footerParams = "keyParams, trackingParams"

name {params: [headerParams, nameRef, trackingParams]} // assigning parameters

// setting parameters of names by specifying parameters name and value pairs..
name object {"title": "Object", "description": "Definition of a substance in the system with the specified properties"}
name operator {"title": "Operator", description:"System operation of applying that-object on a right side to this-object on a left of operator"}
string list {"title": "List", description:"Comma-delimited sequence of textual data, for example: Object identifiers, such as names, #ids, or {uids}"}
string collection {"title": "Collection", description:"Pipe-enclosed sequence of textual data, for example: Object identifiers, such as names, ids, or uids"}
string array {"title": "Array", description:"Sequence of fixed sized data elements"}

parameter path {datatype: array, tag:"Array of attribute ids"}
nameKey valueType {tag:"Attribute name of corresponding descriptor value"}
foreignKey phraseRef {datatype: phrase}
phraseRef optionRef {tag: "Option data in JSON format"}
name inheritance {params: [path, valueType, optionRef, footerParams], "title": "Inheritance", description:"Inheritance of object with path of ancestor ids, value type of descriptor for attributes only, option phrase in JSON format"}

operator is {params: [this: object, prototype: list, optionRef], "title": "Is", description:"System operator defining an Object throught inheritance from Prototype Object(s)"} // parameter names have local scope and do not affect names of global scope

name phrase {footerParams} // assigning parameters
foreignKey languageRef
parameter valueTranslation:{datatype: string}
name translation {params: [valueTranslation, footerParams, phraseRef}

name attribute {"title": "Attribute", description:"Attribute object serves as prototype for a Descriptor", uid:"19EAD211-98B0-45D3-93B7-1803C3E992E1"}

// Columns: Script`Optional properties in the order of the parameters: Title, Description, Uid, ...
Admin is object `Admin`System Adminitrator`{27875688-9FBE-41A7-A733-A32D53715B10}
English is object `English`English Language`{4BDB4E51-D1A9-478E-9FE2-595290AFA19F}
name.creator = Admin.id // default creator id for the following declarations will be Admin's id
phrase.language = English.id // default language id for the following phrases will be id of English language

Attribute is Object // added inheritance to previously declared Attribute
Phrase is Attribute ``Textual information on one or several languages
Language is Attribute
English is Language
Russian is Language ``Russian Language
phrase.languageId = Russian.id // default language id for the following phrases will be id of English language
Russian is Language `???????`??????? ???? // Russian translation
phrase.languageId = English.id

collection ValueTypes {"title": "Value Types", Description:"Constant system attribute names associated with only one data type of a value, which could be possessed by a descriptor"} = |Boolean|Century|Amount|DayOfWeek|Set|File|GeoPoint|Integer|Month|Phrase|RealNumber|Season|Text|Time|TimeAge|TimeDescription|TimePhrase|Uid|Year|"
name Descriptor {valueBoolean:{datatype:"bool"}, valuePhraseId:{datatype:int}, valueInteger{datatype:int}, valueRealNumber{datatype:real}, valueAmount{datatype:money}, valueGeoPoint{datatype:geopoint}, valueTime{datatype:datetime}, valueSeason:{datatype:int}, valueDayOfWeek:{datatype:int}, valueMonth:{datatype:int}, valueYear:{datatype:int}, valueCentury:{datatype:int}, valueTimeAgePhraseId:{datatype:int}, valueTimeDescriptionPhraseId:{datatype:int}, valueText:{datatype:string}, valueUid:{datatype:guid}, objectId:{datatype:int}, attributeId:{datatype:int}, descriptorId:{datatype:int, unique:true, auto:true, readonly:true}, uid:{datatype:guid, unique:true, auto:true}, creatorId:{datatype:int}, createDate:{datatype:datetime, auto:true}, modifiedById:{datatype:datetime}, modifyDate:{datatype:datetime}, deleteDate:{datatype:datetime}, tag:"Descriptor is a system instance of an Attribute for a specific Object with a value placeholder, which can hold several values of different data types at the same time. Object can have many Descriptors"}
 DataFormat is Attribute // Mixed casing is used to determine a default title from name
  List is DataFormat // added inheritance to previously declared List
  Collection is DataFormat // added inheritance to previously declared Collection
 Value is Attribute ``Attribute for value-holding descriptor`
 Number is Value
 Quantity is Number
  Boolean is Value ``Yes/No
  Text is Value ``Textual Information
  Integer is Number ``Simple Number
  Option is Json ``Optional data in JSON format
  IntegerOption is Integer, Option ``Numeric Option
  TextOption is Text, Option ``Textual Information
  PhraseOption is Phrase, Option ``Language-specific Textual Information
  Century is Integer
  Amount is Value ``Amount of money
  DayOfWeek is IntegerOption {description: "Day of Week", option: {display: "|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday", values: "|0|1|2|3|4|5|6"}}
  Year is Integer
  Set is syValue `Set`System-supported ordered sequence of Objects`
 syUom is syAttribute `Uom`Unit of Measure
syRussian is Language {"title": "Russian", Description:"Russian Language"}
// With - system operation of applying Descriptor of the specifying Attribute.
syAlias is sySet `Alias`Alias contains references to other Objects of the same meaning as a given Object
// Of - system operation to apply Descriptor "Alias".
syRelationship is sySet {"title": "Relationship", Description:"Relationship to other Objects"}
syTwoWayRelationship is syRelationship{"title": "TwoWayRelationship", Description:"Bidirectional relationship to other Objects without neccessity to create an opposite relationship from another Object to this one"}

syAction is syObject {"title": "Action", Description: "Action applies any relevant Alias and Relationship descriptors"}
syActionFilter is sySet `ActionFilter`Action Filter contains references of objects that the specified Action applies for
// For - system operation to apply Descriptor "ActionFilter".
Operator is Action for Attribute.
RelatesTo is Operator of Relationship.
Opposition is TwoWayRelationship - Opposition is a set containing references to opposing Attributes.
OpposesTo is Operator of Opposition.
Complex is Set.
Part is Attribute opposesTo Complex.
IsPartOf is Operator of Part.
ConsistsOf is Operator of Complex for Part.

Example of using operators:
CheckoutTeam is syObject
ICS is syObject
Vlad is User isPartOf CheckoutTeam,ICS - creates user Vlad, sets descriptor Part to Vlad, sets descriptor Complex to CheckoutTeam and ICS, and adds Vlad to both of those descriptors.
