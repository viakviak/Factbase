// Names..
name
name null // default name (first specified)
name unique
name default
name auto
name readonly
name required
name tag
name language
  language English // default language (first specified)
  language Russian
name datatype
  datatype string // default datatype (first specified)
  datatype boolean
    boolean false // default boolean
    boolean true
  datatype integer
    integer 0 // default integer
  datatype datetime
  datatype guid
  datatype object {tag: "Definition of a substance in the system with the specified properties"}
  datatype phrase {language: null, tag: "Textual information on one or several languages, forward declaration"}
name parameter {datatype: null, unique: boolean, auto: boolean, required: boolean, tag: phrase, language: null}
  parameter primaryKey {datatype: integer, primaryKey: true, unique:true, auto:true, readonly:true} // generates new auto-incremented number
  parameter foreignKey {datatype: integer, tag: "Reference to some primary key"}
  foreignKey objectRef {datatype: object, tag: "Reference to another object's primary key"}
  foreignKey nameKey {datatype: object, tag: "Reference to another object by its name"}
  parameter title {datatype:phrase, default: name} // by default sets capitalized name with spaces between camel-cased parts of the name
  parameter description {datatype:phrase, default: title} // by default sets title content
  parameter uid {datatype:guid, unique:true, auto:true} // by default generates new guid
  primaryKey id
  objectRef creatorRef
  parameter createDate {datatype:datetime, auto:true}
  objectRef modifiedByRef
  parameter modifyDate {datatype:datetime}
  parameter deleteDate {datatype:datetime}
  objectRef nameRef {tag:"id of the highest pure name declaration"}
name macro // textual representation, which will be evaluated as part of script
  macro keyParams = "uid, id"
  macro headerParams = "title, description"
  macro trackingParams = "creatorRef, createDate, modifiedByRef, modifyDate, deleteDate"
  macro footerParams = "keyParams, trackingParams"

name {params: [headerParams, footerParams, nameRef], tag: "Name", description: "Name"} // assigning parameters

// setting parameters of names by specifying parameters name and value pairs..
string dataFormat
dataFormat list {tag: "Comma-delimited sequence of textual data, for example: Object identifiers, such as names, #ids, or {uids}"}
dataFormat collection {tag: "Pipe-enclosed sequence of textual data, for example: Object identifiers, such as names, ids, or uids"}
dataFormat array {tag: "Sequence of fixed sized data elements"}
dataFormat json {tag: "JSON formatted data"}
dataFormat xml {tag: "XML data"}

parameter path {datatype: array, tag: "Array of attribute ids"}
nameKey valueType {tag:"Attribute name of corresponding descriptor value"}
foreignKey phraseRef {datatype: phrase, tag: "Reference to phrase"}
phraseRef optionRef {tag: "Option data in JSON format"}
name inheritance {params: [path, valueType, optionRef, footerParams], "title": "Inheritance", description:"Inheritance of object with path of ancestor ids, value type of descriptor for attributes only, option phrase in JSON format"}

name phrase {params: [footerParams]} // assigning parameters
foreignKey languageRef
parameter valueTranslation:{datatype: string}
name translation {params: [valueTranslation, phraseRef, footerParams]}

// Columns: Script`Optional properties in the order of the parameters: Title, Description, Uid, ...
object Admin ``System Adminitrator`{27875688-9FBE-41A7-A733-A32D53715B10}
object English ``English Language`{4BDB4E51-D1A9-478E-9FE2-595290AFA19F}
name.creator = Admin.id // default creator id for the following declarations will be Admin's id
phrase.language = English.id // default language id for the following phrases will be id of English language
object attribute ``Attribute object serves as prototype for a Descriptor`19EAD211-98B0-45D3-93B7-1803C3E992E1

attribute phrase ``Textual information on one or several languages
attribute language

collection ValueTypes {tag: "Constant system attribute names associated with only one data type of a value, which could be possessed by a descriptor"} = |Boolean|Century|Amount|DayOfWeek|Set|File|GeoPoint|Integer|Month|Phrase|RealNumber|Season|Text|Time|TimeAge|TimeDescription|TimePhrase|Uid|Year|"

parameter valueBoolean {datatype: boolean}
parameter valuePhraseRef {datatype: PhraseRef}
parameter valueInteger {datatype: integer}
parameter valueRealNumber {datatype: real}
parameter valueAmount {datatype: money}
parameter valueGeoPoint {datatype: geopoint}
parameter valueTime {datatype: datetime}
parameter valueSeason {datatype: integer}
parameter valueDayOfWeek {datatype: integer}
parameter valueMonth {datatype: integer}
parameter valueYear {datatype: integer}
parameter valueCentury {datatype integer}
parameter valueTimeAgePhraseRef {datatype: PhraseRef}
parameter valueTimeDescriptionPhraseRef {datatype: PhraseRef}
parameter valueText {datatype: string}
parameter valueUid {datatype: guid}
parameter attributeRef {datatype: object}

name Descriptor {[valueBoolean, valuePhraseRef, valueInteger, valueRealNumber, valueAmount, valueGeoPoint, valueTime, valueSeason, valueDayOfWeek, valueMonth, valueYear, valueCentury, valueTimeAgePhraseRef, valueTimeDescriptionPhraseRef, valueText, valueUid, objectRef, attributeRef, footerParams], tag:"Descriptor is a system instance of an Attribute for a specific Object with a value placeholder, which can hold several values of different data types at the same time. Object can have many Descriptors"}

attribute dataFormat // Mixed casing is used to determine a default title from name
attribute value
value dataType
value number
number quantity

boolean ``Yes/No
string ``Textual Information
integer ``Simple Number
json ``Optional data in JSON format
  IntegerOption is Integer, Option ``Numeric Option
  TextOption is Text, Option ``Textual Information
  PhraseOption is Phrase, Option ``Language-specific Textual Information
  Century is Integer
  Amount is Value ``Amount of money
  DayOfWeek is IntegerOption {description: "Day of Week", option: {display: "|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday", values: "|0|1|2|3|4|5|6"}}
  Year is Integer
  Set is syValue `Set`System-supported ordered sequence of Objects`
 syUom is syAttribute `Uom`Unit of Measure
syRussian is Language {"title": "Russian", Description:"Russian Language"}
// With - system operation of applying Descriptor of the specifying Attribute.
syAlias is sySet `Alias`Alias contains references to other Objects of the same meaning as a given Object
// Of - system operation to apply Descriptor "Alias".
syRelationship is sySet {"title": "Relationship", Description:"Relationship to other Objects"}
syTwoWayRelationship is syRelationship{"title": "TwoWayRelationship", Description:"Bidirectional relationship to other Objects without neccessity to create an opposite relationship from another Object to this one"}

syAction is syObject {"title": "Action", Description: "Action applies any relevant Alias and Relationship descriptors"}
syActionFilter is sySet `ActionFilter`Action Filter contains references of objects that the specified Action applies for
// For - system operation to apply Descriptor "ActionFilter".
Operator is Action for Attribute.
RelatesTo is Operator of Relationship.
Opposition is TwoWayRelationship - Opposition is a set containing references to opposing Attributes.
OpposesTo is Operator of Opposition.
Complex is Set.
Part is Attribute opposesTo Complex.
IsPartOf is Operator of Part.
ConsistsOf is Operator of Complex for Part.

Example of using operators:
CheckoutTeam is syObject
ICS is syObject
Vlad is User isPartOf CheckoutTeam,ICS - creates user Vlad, sets descriptor Part to Vlad, sets descriptor Complex to CheckoutTeam and ICS, and adds Vlad to both of those descriptors.
