name
name null
name line
name statement
name operator
  operator //
  operator ; // end of statement
  operator block // enclosed content
    block "" // "text" block
    block scope // Scope is a part of script with local definitions, not visible outside the scope. To use other scopes, prefix a name with the scope or its descendant (prefix)
      scope page
        page sys // System page. Default page. To use another page simply declare it. Also declare short prefixes for including other pages. Last declared page will be used for the folowing definitions in script.
      scope {} // "function" block
      scope () // Executes the specified name (constructor) or its property (method) with the enclosed optional parameters (if parameters are completely resolved. Alternatively operation stays open and keep executing every time, when parameters are being resolved - get assigned values)
  operator : // operator "assignment"
  operator , // operator "sequence"
  operator . // operator "accessor"
  operator + // operator "add"
  
name default
name property
  property language
    language English // default language (first specified)
  property datatype
    datatype string //Textual Information. Default datatype (first specified)
    datatype phrase {language} // Textual information on one or several languages, forward declaration
      phrase tag // comment or description
    datatype boolean {tag: "Logical Yes/No"}
      boolean false // default boolean
      boolean true
      boolean unique
      boolean auto
      boolean readonly
      boolean required
      boolean primary
    datatype integer {tag: "Simple Number"}
      integer 0 {tag: "Zero"} // default integer
      integer index {tag: "Index of item in the sequence"}
      integer count {tag: "Count of items in the sequence"}
    datatype datetime
    datatype guid {tag: "Globally Unique Identifier"}
    datatype object {tag: "Definition of a substance in the system with the specified properties"}
  property parameter {datatype, primary, unique, auto, required, readonly, default, tag, language}
    parameter primaryKey {datatype: integer, primary: true, unique: true, auto: true, readonly: true} // generates new auto-incremented number
    parameter foreignKey {datatype: integer, tag: "Reference to a primary key"}
    foreignKey objectRef {datatype: object, tag: "Reference to another object's primary key"}
    foreignKey nameKey {datatype: object, tag: "Reference to another object by its name"}
    parameter title {datatype: phrase, default: name} // by default sets capitalized name with spaces between camel-cased parts of the name
    parameter description {datatype: phrase, default: title} // by default sets title content
    parameter uid {datatype: guid, unique: true, auto: true} // by default generates new guid
    primaryKey id
    objectRef creatorRef
    parameter createDate {datatype: datetime, auto: true}
    objectRef modifiedByRef
    parameter modifyDate {datatype: datetime}
    parameter deleteDate {datatype: datetime}
    foreignKey nameRef {tag: "Reference to another name"} // id of the highest pure name declaration

operator = {tag: "identity, replacement with a string, which will be evaluated as inline part of a script"}
  name keyParams = "uid, id"
  name headerParams = "title, description"
  name trackingParams = "creatorRef, createDate, modifiedByRef, modifyDate, deleteDate"
  name footerParams = "keyParams, trackingParams"
operator typeof {tag: "Converts its parameter to a string"}

name {tag: "Name"} // adds property tag.
name(headerParams, footerParams, nameRef) // constructor with dependencies to persist names
name {toString {return: string, tag: "method to convert names of its parameter(s) to a string. If no parameters - converts names of its own properties"}}

// setting parameters of names by specifying parameters name and value pairs..
string dataFormat
  dataFormat list {tag: "Comma-delimited sequence of textual data, for example: Object identifiers, such as names, ids, or uids"}
  dataFormat collection {tag: "Pipe-enclosed sequence of textual data, for example: Object identifiers, such as names, ids, or uids"}
  dataFormat json {tag: "JSON formatted textual data"}
  dataFormat xml {tag: "XML textual data"}
  dataFormat array {tag: "Sequence of fixed sized data elements"}
object attribute {tag: "Attribute serves as a prototype for Descriptors that are applied to other objects"}

parameter path {datatype: array, tag: "Array of attribute ids"}
nameKey valueType {tag: "Attribute name of corresponding descriptor value"}
foreignKey phraseRef {datatype: phrase, tag: "Reference to phrase"}
phraseRef optionRef {tag: "Optional data in JSON format"}
name inheritance(path, valueType, optionRef, footerParams, tag: "Inheritance of object with path of ancestor ids, value type of descriptor for attributes only, optional phrase in JSON format")

name phrase(footerParams) // allocates a storage for phrases
foreignKey languageRef
parameter valueTranslation:{datatype: string}
name translation(valueTranslation, phraseRef, footerParams) // allocates a storage for translations

json optionRef // optionRef now is inherited from both: phraseRef and json

// Columns: Script`Optional properties in the order of the parameters: Title, Description, Uid, ...
object Admin ``System Administrator`{27875688-9FBE-41A7-A733-A32D53715B10}
object English ``English Language`{4BDB4E51-D1A9-478E-9FE2-595290AFA19F}
name {creator : Admin.id} // default creator id for the following declarations will be Admin's id
phrase {language : English.id} // default language id for the following phrases will be id of English language

collection ValueTypes {tag: "Constant system attribute names associated with only one data type of a value, which could be possessed by a descriptor"} = "|Boolean|Century|Amount|DayOfWeek|Set|File|GeoPoint|Integer|Month|Phrase|RealNumber|Season|Text|Time|TimeAge|TimeDescription|TimePhrase|Uid|Year|"

parameter valueBoolean {datatype: boolean}
parameter valuePhraseRef {datatype: PhraseRef}
parameter valueInteger {datatype: integer}
parameter valueRealNumber {datatype: realNumber}
parameter valueAmount {datatype: money}
parameter valueGeoPoint {datatype: geopoint}
parameter valueTime {datatype: datetime}
parameter valueSeason {datatype: integer}
parameter valueDayOfWeek {datatype: integer}
parameter valueMonth {datatype: integer}
parameter valueYear {datatype: integer}
parameter valueCentury {datatype integer}
parameter valueTimeAgePhraseRef {datatype: PhraseRef}
parameter valueTimeDescriptionPhraseRef {datatype: PhraseRef}
parameter valueText {datatype: string}
parameter valueUid {datatype: guid}
parameter attributeRef {datatype: object}

name Descriptor(valueBoolean, valuePhraseRef, valueInteger, valueRealNumber, valueAmount, valueGeoPoint, valueTime, valueSeason, valueDayOfWeek, valueMonth, valueYear, valueCentury, valueTimeAgePhraseRef, valueTimeDescriptionPhraseRef, valueText, valueUid, objectRef, attributeRef, footerParams, tag:"Descriptor is a system instance of an Attribute for a specific Object with a value placeholder, which can hold several values of different data types at the same time. Object can have many Descriptors")

name nameSet
name {instances{return: nameSet, tag: "method returning nameSet with all instances of a prototype"}}
name day
  day sunday
  day monday
  day tuesday
  day wednesday
  day thursday
  day friday
  day saturday
  
// elevate names and their descendants in the inheritance hierarchy...
attribute ```19EAD211-98B0-45D3-93B7-1803C3E992E1
  attribute phrase
  attribute language
  attribute dataFormat // Mixed casing is used to determine a default title from name
  attribute value
  value dataType
    value number
      number quantity
    value nameSet(nameRef{}, attributeRef, sequenceIndex: integer, footerParams) ``System-supported ordered sequence of name references for a given attribute
      nameSet set `` set of object references
      nameSet option
  
  
  
    index integerOption {nameSet: day.instances()} ``Numeric index of one of the items in the set
        option integerOption // inherited from both: integer and option
      integerOption dayOfWeek {description: "Day of Week", optionRef: {display: "|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday", values: "|0|1|2|3|4|5|6"}}
      integerOption season {description: "Day of Week", optionRef: {display: "|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday", values: "|0|1|2|3|4|5|6"}}
    string stringOption ``Textual Option
    option stringOption // inherited from both: string and option
    phrase phraseOption ``Language-specific Textual Information
    option phraseOption // inherited from both: phrase and option
  integer century
  realNumber amount ``Amount of money
  integer year
  attribute uom ``Unit of Measure
  
// With - system operation of applying Descriptor of the specified Attribute.
set alias ``Alias contains references to other Objects of the same meaning as a given Object
set relationship ``Relationship to other objects
  relationship twoWayRelationship ``Bidirectional relationship to other Objects without neccessity to create an opposite relationship from another Object to this one

operator relatesTo


set actionFilter ``Action Filter contains references of objects that the specified Action applies for
name action {with: {}} ``Action executes the specified name with the specified parameters
  action operator``Operator applies Attributes with optional values to an Object creating a Descriptor.
    operator with  ``applies the specified attributes inline with name definition
      with of ``applies attribute "alias"
      with for ``applies attribute "actionFilter"
//operator relatesTo {with: {alias: relationship}}
//operator relatesTo with {alias: relationship}
operator relatesTo of relationship
RelatesTo is Operator of Relationship.
Opposition is TwoWayRelationship - Opposition is a set containing references to opposing Attributes.
OpposesTo is Operator of Opposition.
Complex is Set.
Part is Attribute opposesTo Complex.
IsPartOf is Operator of Part.
ConsistsOf is Operator of Complex for Part.

Example of using operators:
CheckoutTeam is syObject
ICS is syObject
Vlad is User isPartOf CheckoutTeam,ICS - creates user Vlad, sets descriptor Part to Vlad, sets descriptor Complex to CheckoutTeam and ICS, and adds Vlad to both of those descriptors.

