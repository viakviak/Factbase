// Knowledge..
Know {title:{datatype:"string"}, description:{datatype:"string"}, uid:{datatype:guid, unique:true, auto:true}, knowType:{datatype:int, tag:"id of pure Know declaration"}, name:{datatype:"string", maxlength:2048, unique:true}, id:{datatype:int, unique:true, auto:true, readonly:true}, creatorId:{datatype:int}, createDate:{datatype:datetime, auto:true}, modifiedById:{datatype:datetime}, modifyDate:{datatype:datetime}, deleteDate:{datatype:datetime}}
know Object {title:"Object", description:"Definition of a substance in the system with the specified properties"}
know Operator {title:"Operator", description:"System operation of applying that-object on a right side to this-object on a left of operator"}
know List {title:"List", description:"Comma-delimited sequence of textual data, for example: Object identifiers, such as names, #ids, or {uids}"}
know Collection {title:"Collection", description:"Pipe-enclosed sequence of textual data, for example: Object identifiers, such as names, #ids, or {uids}"}
know Array {title:"Array", description:"Sequence of fixed sized data elements"}
know Inheritance {path:{datatype:string, tag:"Array of attribute ids"}, valueType {datatype:"string", tag:"Attribute name of corresponding descriptor value"}, optionPhraseID:{datatype:int}, tag:"Option data in JSON format", uid:{datatype:guid, unique:true, auto:true}, creatorId:{datatype:int}, createDate:{datatype:datetime, auto:true}, modifiedById:{datatype:datetime}, modifyDate:{datatype:datetime}}
operator Is {thisObject:Object, prototypeObject:List, title:"Is", description:"System operator defining an Object throught inheritance from Prototype Object(s)"}
know Phrase {uid:{datatype:guid, unique:true, auto:true}, phraseId:{datatype:int, readonly:true}, creatorId:{datatype:int}, createDate:{datatype:datetime, auto:true}, modifiedById:{datatype:datetime}, modifyDate:{datatype:datetime}, deleteDate:{datatype:datetime}}
know Translation {valueTranslation:{datatype:"string"}, uid:{datatype:guid, unique:true, auto:true}, languageID:{datatype:int}, phraseID:{datatype:int}, translationId:{datatype:int, unique:true, auto:true, readonly:true}, creatorId:{datatype:int}, createDate:{datatype:datetime, auto:true}, modifiedById:{datatype:datetime}, modifyDate:{datatype:datetime}}
know Attribute {title:"Attribute", description:"Attribute object serves as prototype for a Descriptor", uid:"19EAD211-98B0-45D3-93B7-1803C3E992E1"}
// Columns: Script`Optional properties in the specified order: Title, Description, Uid, ...
Admin is Object `Admin`System Adminitrator`{27875688-9FBE-41A7-A733-A32D53715B10}
English is Object `English`English Language`{4BDB4E51-D1A9-478E-9FE2-595290AFA19F}
know.creatorId = Admin.id // default creator id for the following declarations will be Admin's id
phrase.languageId = English.id // default language id for the following phrases will be id of English language

Attribute is Object // added inheritance to previously declared Attribute
collection ValueTypes {title:"Value Types", Description:"Constant system attribute names associated with only one data type of a value, which could be possessed by a descriptor"} = |Boolean|Century|Amount|DayOfWeek|Set|File|GeoPoint|Integer|Month|Phrase|RealNumber|Season|Text|Time|TimeAge|TimeDescription|TimePhrase|Uid|Year|"
know Descriptor {valueBoolean:{datatype:"bool"}, valuePhraseId:{datatype:int}, valueInteger{datatype:int}, valueRealNumber{datatype:real}, valueAmount{datatype:money}, valueGeoPoint{datatype:geopoint}, valueTime{datatype:datetime}, valueSeason:{datatype:int}, valueDayOfWeek:{datatype:int}, valueMonth:{datatype:int}, valueYear:{datatype:int}, valueCentury:{datatype:int}, valueTimeAgePhraseId:{datatype:int}, valueTimeDescriptionPhraseId:{datatype:int}, valueText:{datatype:string}, valueUid:{datatype:guid}, objectId:{datatype:int}, attributeId:{datatype:int}, descriptorId:{datatype:int, unique:true, auto:true, readonly:true}, uid:{datatype:guid, unique:true, auto:true}, creatorId:{datatype:int}, createDate:{datatype:datetime, auto:true}, modifiedById:{datatype:datetime}, modifyDate:{datatype:datetime}, deleteDate:{datatype:datetime}, tag:"Descriptor is a system instance of an Attribute for a specific Object with a value placeholder, which can hold several values of different data types at the same time. Object can have many Descriptors"}
 DataFormat is Attribute // Mixed casing is used to determine a default title from name
  List is DataFormat // added inheritance to previously declared List
  Collection is DataFormat // added inheritance to previously declared Collection
 Value is Attribute ``Attribute for value-holding descriptor`
 Number is Value
 Quantity is Number
  Boolean is Value ``Yes/No
  Text is syValue ``Textual Information
  Integer is syNumber ``Simple Number
  syOption is syJson `Option`Optional data in JSON format`
  syYear is syValue with `Year`
  sySet is syValue `Set`System-supported ordered sequence of Objects`
 syUom is syAttribute `Uom`Unit of Measure
syRussian is Language {Title:"Russian", Description:"Russian Language"}
// With - system operation of applying Descriptor of the specifying Attribute.
syAlias is sySet `Alias`Alias contains references to other Objects of the same meaning as a given Object
// Of - system operation to apply Descriptor "Alias".
syRelationship is sySet {Title:"Relationship", Description:"Relationship to other Objects"}
syTwoWayRelationship is syRelationship{Title:"TwoWayRelationship", Description:"Bidirectional relationship to other Objects without neccessity to create an opposite relationship from another Object to this one"}

syAction is syObject {Title:"Action", Description: "Action applies any relevant Alias and Relationship descriptors"}
syActionFilter is sySet `ActionFilter`Action Filter contains references of objects that the specified Action applies for
// For - system operation to apply Descriptor "ActionFilter".
Operator is Action for Attribute.
RelatesTo is Operator of Relationship.
Opposition is TwoWayRelationship - Opposition is a set containing references to opposing Attributes.
OpposesTo is Operator of Opposition.
Complex is Set.
Part is Attribute opposesTo Complex.
IsPartOf is Operator of Part.
ConsistsOf is Operator of Complex for Part.

Example of using operators:
CheckoutTeam is syObject
ICS is syObject
Vlad is User isPartOf CheckoutTeam,ICS - creates user Vlad, sets descriptor Part to Vlad, sets descriptor Complex to CheckoutTeam and ICS, and adds Vlad to both of those descriptors.
